////////////////////////////////////////////////////////////////////////
리액트 웹개발 => 돔컨테이너오 컴포넌트 구조 설계 
////////////////////////////////////////////////////////////////////////

[public 폴더]
index.html => #root [돔컨테이너] 

[src 폴더]
index.js
    [components 폴더]
        WrapComponent.jsx
             [wrap 폴더]
             HeaderModalComponent.jsx
             HeaderComponent.jsx     
               
               main
               MainComponent.jsx     
                  [main 폴더]                              
                  Section1Component.jsx
                  Section1SlideWrapSlide.jsx
                  :
                  :
                  :
               main_sub
                  Sub01Component.jsx   신상품
                     Sub01ChildComponent.jsx

                  Sub02Component.jsx   베스트
                  Sub03Component.jsx   알뜰쇼핑 
                  Sub04Component.jsx   특가혜택

                  Sub05SignUpComponent.jsx  회원가입폼
                  Sub06SignInComponent.jsx  로그인폼
                  Sub07NoticeComponent.jsx  공지사항(게시판)


             FooterComponent.jsx     
             IntroModalComponent.jsx
             GoTopComponent.jsx
             QuikMenuComponent.jsx
             
//////////////////////////////////////////////////////////////////////////////////
/// 라우터(Router) 설치 구현(페이지구성)
//////////////////////////////////////////////////////////////////////////////////
npm  i react-router-dom
import react-router-dom


HeaderComponent  링크 걸어주는 내용 Link
라우팅

메인페이지
서브페이지 

패스네임(pathname) 네이밍(패턴이름===맵핑이름)
path='/'
path='/main'







//////////////////////////////////////////////////////////////////////////////////
/// 최근본상품 & 장바구니 이벤트 구현
//////////////////////////////////////////////////////////////////////////////////
상품을 클릭하면 우측에 목록에 추가된다.
그리고 상세페이지로 이동한다.
최근 본상품과 장바구니는 스택구조로 저장된다.
스택(Stack) : Last In First Out[LIFOR] 
             나중에 선택한 상품이 맨위에 쌓인다는 특징
             양동이 구조

큐(Que) : First In  First Out
          먼저 선택한 상품이 맨앞에 있는 구조
          장바구니 Cart 

마켓컬리
최근본상품 : Stck => LIFO
장바구니 : Que => FIFO



//////////////////////////////////////////////////////////////////////////////////
/// 팝업창(모달창) 쿠키 이벤트 구현
//////////////////////////////////////////////////////////////////////////////////
쿠키 생성과 가져오기 
로컬 스토레이지에 쿠키설정하기
localStorage
만료기한 1/1000 .getTime();
setItem(키, 값);  한쌍으로 설정
getItem(키);


1. 쿠키 생성하기
setCookie(셋쿠키) 메서드 만들기 및 구현하기
: 모달창 닫기 => 다시 안보기 클릭하면 창이 닫히고, 쿠키가 1일 쿠키 
1) 인트로 메인 모달창 닫기 이벤트 구현 => 단순 창닫기 
2) 인트로 메인 모달창 다시 안 보기 이벤트 구현 => 창닫기와 다시 안 보기  쿠키 생성된다.
   그리고 새로고침해도 인트로 메인 모달창은 열리지 않는다.
   단, 1일이 지나면 자동으로 쿠키는 삭제가 되고, 인트로 모달창은 열린다.
3) 쿠키의 구성요소
   도큐먼트.쿠키 = `쿠키이름=쿠키값; 패스=/; 만료일=날짜셋팅.국제표준시();`;  


4) 쿠키 생성(세터함수)
   만료일(expires) 현재날짜.셋팅날짜(현재날짜.날짜+1) 1일 기한
   만료일(expires) 현재날짜.셋팅월(현재날짜.월+1) 1달 기한
   만료일(expires) 현재날짜.셋팅년(현재날짜.년+1) 1년 기한
   만료일(expires) 현재날짜.셋팅시간(현재날짜.시+1) 1시간 기한
   만료일(expires) 현재날짜.셋팅분(현재날짜.분+1) 1분 기한
   만료일(expires) 현재날짜.셋팅초(현재날짜.초+1) 1초 기한
   let toDay = new Date();
   toDay.setDate(toDay.getDate()+1)  1일
   toDay.setMonth(toDay.getMonth()+1)  1개월
   toDay.setFullYear(toDay.getFullYear()+1)  1년
   toDay.setHoures(toDay.getHoures()+1)  1시간
   toDay.setMinutes(toDay.getMinutes()+1)  1분
   toDay.setSeconds(toDay.getSeconds()+1)  1분

  let cookieName  = 'MJKURLY_INTROMODAL_01';
  let cookieValue = 'YEAR8_SALE_EVENT_MODALWINDOW';

  document.cookie = `${cookieName}=${cookieValue}; path=/; expires=${toDay.toUTCString()};`; 
  console.log( topModal );
  console.log( topModal.value );
  console.log( topModal.expires );
  
  console.log( new Date(topModal.expires) );
  console.log( new Date(topModal.expires).getFullYear() );
  console.log( new Date(topModal.expires).getMonth()+1 ); // 0 ~ 11 월은 1을 더한ㄷ다
  console.log( new Date(topModal.expires).getDate() );
  console.log( new Date(topModal.expires).getHours() );
  console.log( new Date(topModal.expires).getMinutes() );
  console.log( new Date(topModal.expires).getSeconds() )  
  console.log('1년 탑 모달닫기 셋팅  ',  new Date(1716858942338).getFullYear() );
  console.log('1년 탑 모달닫기 셋팅  ',  new Date(1716858942338).getMonth()+1 );
  console.log('1년 탑 모달닫기 셋팅  ',  new Date(1716858942338).getDate() );
  console.log('1년 탑 모달닫기 셋팅  ',  new Date(1716858942338).getHours() );


2. 쿠키 가져오기
getCookie(겟쿠키) 메서드 만들기 및 구현하기
1) 목적은 인트로 메인 모달창 다시 안 보기로 설정된 쿠키가 있다면 창을 열지 않고
   설정된 쿠키가 없다면 창을 띄운다.
2) 로딩시 또는 수시로 새로고침할 때 쿠키를 가져와서 설정된 쿠키 이름이 있는지 검증한다.

적용은 모달창(메인모달, 탐모달)

메인 모달
너비 440px
높이 395.438px
버튼 높이 60
콘텐츠 내용  이미지








//////////////////////////////////////////////////////////////////////////////////
/// 헤더영역 FIXED 스크롤 이벤트 구현
//////////////////////////////////////////////////////////////////////////////////
윈도우 스크롤이벤트와 상태관리 구현

1. 스크롤 발생하면 헤서 선택자 #header row3 의 스크롤 탑값이 상단에 도달시 
   row3는 상단에 고정되고 row2의 입력상자와 아이콘들이 아래에 나타나면서 고정된다.
2. useRef() 훅을 사용 row3를 선택하고, 상단에 변수를 등록한다.
3. 스크롤 이벤트를 구현한다.




//////////////////////////////////////////////////////////////////////////////////
/// 헤더 탑 모달 닫기와 열기 쿠키 이벤트 구현
//////////////////////////////////////////////////////////////////////////////////
쿠키와 상태관리 구현
로컬 스토레이지 상태관리 구현



//////////////////////////////////////////////////////////////////////////////////
/// 메인슬라이드 애니메이션 알고리즘 상태관리 구현
//////////////////////////////////////////////////////////////////////////////////
메인슬라이드 애니메이션  상태관리 구현

1. 컨테이너박스에 마우스 오버시 화살표 버튼 보인다. 
주의: 스타일 설정 반드시 보이게 해줘야한다.






//////////////////////////////////////////////////////////////////////////////////
/// MVC 모델링 구현
//////////////////////////////////////////////////////////////////////////////////
객체모델링 구현하기

[MVC 모델링 구현]
Model   - 외부 데이터(데이터베이스)=>JSON 형식파일
View    - 컴포넌트(HTML, CSS, SCSS 화면에 보여준다)=>View Template(뷰템플릿트)
Control - AXIOS API(비동기전송방식 데이터 가져오기)

메인슬라이드 20개 이미지
JSON 파일형식 저장
AXIOS API 구현
슬라이드 애니메이션 구현 jQuery 패키지 설치 및 구현
React.useEffect(); 사용

매일 수시로 변경되는 메인슬라이드 재사용및 업데이트
용이하게 컴포넌트 제작 구현
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
//// 회원가입폼(Signup) & 데이터베이스 
///////////////////////////////////////////////////////////////////////////////////

풀스택(프론트 앞단 => 백단  )

유효성검사
정규표현식(RegExp) : 패턴디자인(문자, 숫자, 특수문자, 기타 .... 유효성검사 적절한 언어)

입력된 데이터는
리액트(프론트 앞단) => 가입요청(Request 리퀘스트) => 백단(PHP, JSP, ASP) SQL => 데이터베이스 (MYSQL, ORACLE, MSSQL) 서버에 저장된다.

백단 => 응답(Response) => 앞단


///////////////////////////////////////////////////////////////////////////////////

폼디자인
너비 640

줄 사이 여백 10
줄 좌우 여백 20

ul > li.row > div 좌우 패딩

휴대폰
3

주소
4

추가입력사항
3

약관동의
9

레이블 14 굵게 
입력상자 16 너비 333 높이 46
버튼 너비 120 높이 44
가이드 텍스트 #f03f40 13px


회원가입 상태변수
디폴트 프롭스

회원가입 : {
   아이디 : '',
   비밀번호 : '',
   비밀번호확인 : '',
   이름 : '',
   이메일 : '',
   휴대폰 : '',
   주소1 : '',
   주소2 : '',
   성별 : '',
   생년 : '',
   생월 : '',
   생일 : '',
   추가입력사항 : '',
   참여이벤트명 : '',
   이용약관 : [
      "이용약관동의(필수)",
      "개인정보 수집∙이용 동의(필수)",
      "개인정보 수집∙이용 동의(선택)",
      "무료배송, 할인쿠폰 등 혜택/정보 수신 동의(선택)",
      "SMS(선택)",
      "이메일(선택)",
      "본인은 만 14세 이상입니다.(필수)"
   ],
   이용약관동의 : []

}


